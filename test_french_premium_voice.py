#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test de validation de la voix fran√ßaise premium optimis√©e pour SUI Peer
Test rapide de la synth√®se vocale fran√ßaise avec Audrey (Premium)
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from peer.interfaces.sui.tts.text_to_speech import TextToSpeech
from peer.interfaces.sui.config.config_loader import load_sui_config, create_tts_config_from_sui_config
import logging

# Configuration des logs
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("FrenchVoiceTest")

def test_french_premium_voice():
    """Test de la voix fran√ßaise premium Audrey"""
    
    print("üéôÔ∏è Test de la voix fran√ßaise premium pour SUI Peer")
    print("=" * 60)
    
    try:
        # Chargement de la configuration SUI
        config = load_sui_config()
        
        # Cr√©ation de la configuration TTS appropri√©e
        tts_config = create_tts_config_from_sui_config(config, "Test de voix fran√ßaise premium")
        
        print(f"‚úÖ Configuration TTS cr√©√©e : {tts_config.engine_type.value}, langue: {tts_config.language}, voix: {tts_config.voice}")
        
        # Initialisation du moteur TTS
        print("\nüîß Initialisation du moteur TTS...")
        tts = TextToSpeech(tts_config)
        
        # Tests vocaux en fran√ßais
        test_phrases = [
            "Bonjour ! Je suis l'interface vocale Peer avec la voix fran√ßaise premium Audrey.",
            "Ma synth√®se vocale fran√ßaise est maintenant optimis√©e pour une meilleure fluidit√©.",
            "Test de reconnaissance : Quelle heure est-il ?",
            "Interface vocale pr√™te pour les commandes SUI.",
            "Merci d'utiliser Peer - votre assistant vocal intelligent."
        ]
        
        print(f"\nüé§ Test de {len(test_phrases)} phrases fran√ßaises...")
        
        for i, phrase in enumerate(test_phrases, 1):
            print(f"\n[{i}/{len(test_phrases)}] üîä Synth√®se : '{phrase[:50]}...'")
            
            try:
                result = tts.synthesize(phrase)
                if result.success:
                    print(f"‚úÖ Synth√®se r√©ussie avec {result.engine_used}")
                else:
                    print(f"‚ö†Ô∏è Synth√®se √©chou√©e : {result.error_message}")
                    
            except Exception as e:
                print(f"‚ùå Erreur synth√®se : {e}")
        
        print(f"\n‚úÖ Test de la voix fran√ßaise premium termin√© avec succ√®s!")
        print("üéØ Voix configur√©e : Audrey (Premium) - Qualit√© optimale")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test vocal : {e}")
        return False

if __name__ == "__main__":
    success = test_french_premium_voice()
    sys.exit(0 if success else 1)
