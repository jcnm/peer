"""
Adaptateur d'interface pour SUI.

Ce module d√©finit l'adaptateur qui fait le lien entre l'interface vocale (SUI)
et le Core, conform√©ment √† l'architecture hexagonale.
"""

import logging
from typing import Dict, Any, Optional
from enum import Enum

from peer.core import PeerDaemon, CoreRequest, CoreResponse, CommandType, ResponseType, InterfaceType
from peer.core.protocol import InterfaceAdapter

from peer.interfaces.sui.domain.models import InterfaceAction, SUIResponse


class SUIInterfaceAdapter(InterfaceAdapter):
    """
    Adaptateur pour l'interface vocale (SUI).
    
    Fait le lien entre l'interface SUI et le Core, en respectant
    l'ind√©pendance du Core vis-√†-vis des interfaces.
    """
    
    def __init__(self):
        """Initialise l'adaptateur d'interface SUI."""
        super().__init__(InterfaceType.SUI)
        self.logger = logging.getLogger("SUIInterfaceAdapter")
    
    def translate_to_core(self, interface_input) -> CoreRequest:
        """
        Traduit une entr√©e d'interface en requ√™te Core.
        
        Args:
            interface_input: Entr√©e de l'interface (dict ou autre)
            
        Returns:
            Requ√™te format√©e pour le Core
        """
        if isinstance(interface_input, dict):
            command_type = interface_input.get('command_type')
            
            # Gestion sp√©ciale pour les commandes de quit
            if command_type in ['DIRECT_QUIT', 'SOFT_QUIT', 'QUIT']:
                command_type = CommandType.QUIT
            
            # Si aucun type de commande n'est d√©tect√© ou si c'est une commande inconnue,
            # mapper vers PROMPT pour que le Core puisse traiter le texte libre
            if not command_type or command_type == 'UNKNOWN':
                command_type = CommandType.PROMPT
                self.logger.info(f"üîÑ Commande inconnue mapp√©e vers PROMPT: {interface_input.get('full_text', 'N/A')}")
            
            # Convertir en CommandType si c'est une cha√Æne
            if isinstance(command_type, str):
                try:
                    command_type = CommandType(command_type.lower())
                except ValueError:
                    # Si la conversion √©choue, utiliser PROMPT comme fallback
                    self.logger.warning(f"‚ö†Ô∏è Type de commande invalide '{command_type}', utilisation de PROMPT")
                    command_type = CommandType.PROMPT
            
            return CoreRequest(
                command=command_type,
                interface_type=InterfaceType.SUI,
                parameters=interface_input.get('parameters', {}),
                **{k: v for k, v in interface_input.items() if k not in ['command_type', 'args', 'full_text']}
            )
        else:
            # Si l'entr√©e n'est pas un dictionnaire, on cr√©e une requ√™te simple
            return CoreRequest(
                command=CommandType.PROMPT,
                interface_type=InterfaceType.SUI,
                parameters={"full_text": str(interface_input)}
            )
    
    def translate_from_core(self, core_response: CoreResponse) -> SUIResponse:
        """
        Traduit une r√©ponse Core en format sp√©cifique √† l'interface.
        
        Args:
            core_response: R√©ponse du Core
            
        Returns:
            R√©ponse format√©e pour l'interface SUI
        """
        return self.process_core_response(core_response)
    
    def format_help(self, help_data) -> str:
        """
        Formate les informations d'aide pour cette interface.
        
        Args:
            help_data: Donn√©es d'aide du Core (peut √™tre une cha√Æne ou un dictionnaire)
            
        Returns:
            str: Texte d'aide format√© pour cette interface
        """
        if isinstance(help_data, str):
            return help_data
        
        if isinstance(help_data, dict):
            commands = help_data.get('commands', {})
            help_text = "Commandes disponibles:\n\n"
            
            for cmd_name, cmd_info in commands.items():
                help_text += f"- {cmd_name}: {cmd_info.get('description', 'Pas de description')}\n"
            
            return help_text
        
        return "Aide non disponible."
    
    def format_error(self, error_response) -> str:
        """
        Formate une r√©ponse d'erreur pour cette interface.
        
        Args:
            error_response: R√©ponse d'erreur du Core (CoreResponse ou cha√Æne)
            
        Returns:
            str: Message d'erreur format√©
        """
        if isinstance(error_response, str):
            return f"Erreur: {error_response}"
        
        if isinstance(error_response, CoreResponse):
            return f"Erreur: {error_response.message or 'Erreur inconnue'}"
        
        return "Une erreur est survenue."
    
    def process_core_response(self, core_response: CoreResponse) -> SUIResponse:
        """
        Traite la r√©ponse du Core et la convertit en r√©ponse SUI.
        
        Args:
            core_response: R√©ponse du Core
            
        Returns:
            R√©ponse format√©e pour l'interface SUI
        """
        # Initialiser la r√©ponse SUI
        response_data = SUIResponse(
            message=core_response.message or "",
            vocal_message=core_response.message or "",
            should_vocalize=True,
            interface_action=InterfaceAction.NONE,
            success=(core_response.type == ResponseType.SUCCESS)
        )
        
        # D√©finir le message d'erreur si n√©cessaire
        if core_response.type == ResponseType.ERROR:
            response_data.error_message = core_response.message or "Erreur inconnue"
            
        # D√©finir l'action d'interface en fonction de la r√©ponse du Core
        if core_response.message:
            response_data.interface_action = InterfaceAction.INFORM
        
        # Gestion des actions sp√©cifiques bas√©es sur la r√©ponse du d√©mon
        if hasattr(core_response, 'data') and core_response.data:
            # Gestion des demandes de quitter
            if ('quit' in core_response.data and core_response.data['quit'] is True) or \
               ('farewell' in core_response.data and core_response.data['farewell'] is True):
                response_data.interface_action = InterfaceAction.QUIT
                self.logger.info("üé¨ Action d'interface d√©finie sur QUIT suite √† la confirmation d'arr√™t du d√©mon.")
            
            # Gestion des demandes d'informations suppl√©mentaires
            elif core_response.data.get("needs_user_clarification"):
                response_data.interface_action = InterfaceAction.ASK
                response_data.action_details = {
                    "clarification_prompt": core_response.data.get("clarification_prompt", "")
                }
                self.logger.info(f"üé¨ Action d'interface d√©finie sur ASK: {response_data.action_details}")
            
            # Gestion des informations de progression
            elif core_response.data.get("progress_info"):
                response_data.interface_action = InterfaceAction.PROGRESS
                response_data.action_details = {
                    "progress": core_response.data.get("progress_info", {})
                }
                self.logger.info(f"üé¨ Action d'interface d√©finie sur PROGRESS: {response_data.action_details}")

        # Pour les commandes sp√©ciales, v√©rifier aussi le type de r√©ponse et le statut
        if core_response.status == "quit_requested":
            response_data.interface_action = InterfaceAction.QUIT
            self.logger.info("üé¨ Action d'interface d√©finie sur QUIT en raison du statut 'quit_requested'.")

        return response_data
    
    def create_core_request(self, command_type: CommandType, args: list = None, 
                          full_text: str = "", **kwargs) -> CoreRequest:
        """
        Cr√©e une requ√™te pour le Core √† partir des param√®tres de l'interface.
        
        Args:
            command_type: Type de commande
            args: Arguments de la commande
            full_text: Texte complet de la commande
            **kwargs: Param√®tres suppl√©mentaires
            
        Returns:
            Requ√™te format√©e pour le Core
        """
        # Cr√©er la requ√™te de base
        request = CoreRequest(
            command=command_type,
            interface_type=InterfaceType.SUI,
            parameters={"args": args or []} if args else {}
        )
        
        # Ajouter les donn√©es suppl√©mentaires
        if full_text:
            request.parameters["full_text"] = full_text
        
        # Ajouter les autres param√®tres
        for key, value in kwargs.items():
            request.parameters[key] = value
        
        return request
