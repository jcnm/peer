#!/usr/bin/env python3
"""
Test d'am√©lioration de la dur√©e d'√©coute pour l'interface vocale en temps r√©el.

Ce script teste si les modifications apport√©es √† l'interface vocale permettent
de capturer des phrases plus longues sans interruption pr√©matur√©e.
"""

import os
import sys
import time
import logging
import threading
from pathlib import Path

# Configuration pour √©viter les warnings OMP
os.environ["OMP_NUM_THREADS"] = "1"

# Configuration des logs
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

# Ajouter le chemin source pour l'importation
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, os.path.join(current_dir, 'src'))
sys.path.insert(0, current_dir)

# Importer apr√®s avoir configur√© les chemins
from peer.interfaces.sui.stt.speech_recognizer import SpeechRecognizer
from peer.interfaces.sui.stt.audio_io import AudioCapture, VoiceActivityDetector, VADMode, AudioFormat
from peer.interfaces.sui.stt.continuous_speech_manager import ContinuousSpeechManager

class ListeningDurationTest:
    """Test de la dur√©e d'√©coute am√©lior√©e."""
    
    def __init__(self):
        self.logger = logging.getLogger("ListeningDurationTest")
        self.running = False
        self.transcriptions = []
        self.transcription_times = []
        self.test_phrases = [
            "Ceci est un test pour v√©rifier si l'interface peut capturer des phrases plus longues sans interruption pr√©matur√©e.",
            "La dur√©e d'√©coute a √©t√© augment√©e pour permettre de capturer des phrases compl√®tes, m√™me avec des pauses naturelles.",
            "Les modifications incluent l'augmentation de la dur√©e maximale des batchs, l'ajustement du seuil de pause, et l'optimisation des m√©canismes de d√©tection de fin de phrase.",
            "Maintenant nous allons tester si ces modifications fonctionnent correctement et si l'interface peut transcrire cette longue phrase sans la couper en plusieurs morceaux.",
        ]
        
        # Initialiser les composants
        self._init_components()
    
    def _init_components(self):
        """Initialise les composants n√©cessaires pour le test."""
        self.logger.info("üöÄ Initialisation des composants de test")
        
        try:
            # Configuration WhisperX 
            stt_config = {
                'stt_settings': {
                    'engines': {
                        'whisperx': {
                            'enabled': True,
                            'model_name': 'base',
                            'language': 'fr',
                            'priority': 1,
                            'parameters': {
                                'batch_size': 8,
                                'task': 'transcribe',
                                'language': 'french'
                            }
                        }
                    }
                }
            }
            
            # Initialiser le recognizer
            self.speech_recognizer = SpeechRecognizer(stt_config)
            self.logger.info("‚úÖ Speech recognizer initialis√©")
            
            # Initialiser la capture audio
            audio_config = {
                'sample_rate': AudioFormat.SAMPLE_RATE,
                'channels': AudioFormat.CHANNELS,
                'chunk_size': AudioFormat.CHUNK_SIZE,
                'vad_sensitivity': 3
            }
            self.audio_capture = AudioCapture(audio_config)
            self.logger.info("‚úÖ Capture audio initialis√©e")
            
            # Initialiser le VAD
            self.vad = VoiceActivityDetector(mode=VADMode.VERY_AGGRESSIVE)
            self.logger.info("‚úÖ VAD initialis√©")
            
            # Initialiser le gestionnaire de parole continue avec les param√®tres am√©lior√©s
            self.speech_manager = ContinuousSpeechManager(
                speech_recognizer=self.speech_recognizer,
                pause_threshold=1.2,      # Pause plus longue pour permettre des pauses naturelles
                min_segment_duration=0.05, # Segments tr√®s courts pour capturer toute parole
                max_batch_duration=10.0,   # Batches plus longs pour capturer des phrases compl√®tes
                transcription_callback=self._on_transcription_received
            )
            self.logger.info("‚úÖ Gestionnaire de parole continue initialis√©")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de l'initialisation: {e}")
            raise
    
    def _on_transcription_received(self, text: str, is_final: bool):
        """Callback appel√© quand une transcription est re√ßue."""
        if is_final and text.strip():
            self.logger.info(f"‚úÖ Transcription finale: '{text}'")
            self.transcriptions.append(text)
            self.transcription_times.append(time.time())
    
    def start_test(self):
        """D√©marre le test d'√©coute."""
        self.running = True
        self.logger.info("üéôÔ∏è D√©marrage du test d'√©coute")
        
        # D√©marrer les composants
        self.speech_manager.start()
        
        # D√©marrer l'√©coute audio
        if not self.audio_capture.start_recording():
            self.logger.error("‚ùå Impossible de d√©marrer l'enregistrement audio")
            return False
        
        # Thread pour traiter les segments audio
        audio_thread = threading.Thread(target=self._audio_processing_loop, daemon=True)
        audio_thread.start()
        
        self.logger.info("üëÇ Test d'√©coute d√©marr√©. Parlez dans le microphone...")
        self.logger.info("üìù Nous allons mesurer combien de temps il faut pour transcrire une phrase compl√®te.")
        
        # Attendre les r√©sultats pendant 60 secondes
        test_duration = 60  # secondes
        start_time = time.time()
        
        while time.time() - start_time < test_duration and self.running:
            time.sleep(0.5)
            
            # Afficher les r√©sultats interm√©diaires s'il y en a
            if len(self.transcriptions) > 0 and time.time() - start_time > 10:
                self._display_current_results()
        
        # Arr√™ter les composants
        self.stop_test()
        
        # Afficher les r√©sultats finaux
        self._display_final_results()
        
        return True
    
    def stop_test(self):
        """Arr√™te le test d'√©coute."""
        self.running = False
        
        if self.speech_manager:
            self.speech_manager.stop()
        
        if self.audio_capture:
            self.audio_capture.stop_recording()
        
        self.logger.info("üõë Test d'√©coute arr√™t√©")
    
    def _audio_processing_loop(self):
        """Boucle de traitement des segments audio."""
        segment_count = 0
        speech_count = 0
        
        while self.running:
            # R√©cup√©rer le prochain segment audio
            segment = self.audio_capture.get_audio_segment(timeout=0.5)
            if segment is None:
                continue
            
            segment_count += 1
            if segment.has_speech:
                speech_count += 1
                
                # Envoyer au gestionnaire de parole continue
                try:
                    self.speech_manager.add_audio_segment(segment.data, segment.has_speech)
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur traitement audio: {e}")
            
            # Log p√©riodique
            if segment_count % 50 == 0:
                self.logger.info(f"üìä Segments trait√©s: {segment_count}, avec parole: {speech_count}")
    
    def _display_current_results(self):
        """Affiche les r√©sultats interm√©diaires du test."""
        self.logger.info("\n--- R√©sultats interm√©diaires ---")
        self.logger.info(f"Nombre de transcriptions: {len(self.transcriptions)}")
        
        if len(self.transcriptions) > 0:
            self.logger.info(f"Derni√®re transcription: {self.transcriptions[-1]}")
            
            # Calculer les d√©lais entre les transcriptions
            if len(self.transcription_times) > 1:
                delays = [self.transcription_times[i] - self.transcription_times[i-1] 
                          for i in range(1, len(self.transcription_times))]
                self.logger.info(f"D√©lai moyen entre transcriptions: {sum(delays)/len(delays):.2f}s")
    
    def _display_final_results(self):
        """Affiche les r√©sultats finaux du test."""
        self.logger.info("\n" + "="*80)
        self.logger.info("üìä R√âSULTATS DU TEST D'√âCOUTE")
        self.logger.info("="*80)
        
        self.logger.info(f"Nombre total de transcriptions: {len(self.transcriptions)}")
        
        if len(self.transcriptions) > 0:
            self.logger.info("\n--- Transcriptions captur√©es ---")
            for i, text in enumerate(self.transcriptions):
                self.logger.info(f"{i+1}. {text}")
            
            # Calculer la longueur moyenne des transcriptions en mots
            word_counts = [len(t.split()) for t in self.transcriptions]
            avg_word_count = sum(word_counts) / len(word_counts)
            self.logger.info(f"\nLongueur moyenne des transcriptions: {avg_word_count:.1f} mots")
            
            # Calculer les d√©lais entre les transcriptions
            if len(self.transcription_times) > 1:
                delays = [self.transcription_times[i] - self.transcription_times[i-1] 
                          for i in range(1, len(self.transcription_times))]
                self.logger.info(f"D√©lai moyen entre transcriptions: {sum(delays)/len(delays):.2f}s")
        
        self.logger.info("\n‚úÖ Test d'√©coute termin√©. Analyse des r√©sultats:")
        
        if len(self.transcriptions) == 0:
            self.logger.info("‚ùå Aucune transcription captur√©e. V√©rifiez le microphone et les param√®tres audio.")
        elif avg_word_count < 5:
            self.logger.info("‚ö†Ô∏è Les transcriptions sont tr√®s courtes. Des am√©liorations suppl√©mentaires peuvent √™tre n√©cessaires.")
        elif avg_word_count >= 10:
            self.logger.info("‚úÖ Les transcriptions sont suffisamment longues. Les modifications semblent efficaces!")
        else:
            self.logger.info("‚ö†Ô∏è Les transcriptions sont de longueur moyenne. Des ajustements suppl√©mentaires pourraient √™tre b√©n√©fiques.")


def main():
    """Point d'entr√©e principal."""
    try:
        print("\nüöÄ D√©marrage du test d'am√©lioration de la dur√©e d'√©coute...")
        
        # Cr√©er et d√©marrer le test
        test = ListeningDurationTest()
        test.start_test()
        
    except KeyboardInterrupt:
        print("\n‚å®Ô∏è Test interrompu par l'utilisateur")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        logging.error(f"Erreur dans le test: {e}")
    
    print("\nüëã Test termin√©.")


if __name__ == "__main__":
    main()
