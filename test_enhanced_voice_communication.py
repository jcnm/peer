#!/usr/bin/env python3
"""
Test des am√©liorations de communication vocale fluide pour le syst√®me SUI.

Ce script teste les nouvelles fonctionnalit√©s de feedback vocal enrichi :
- Annonces d'actions avant ex√©cution
- Feedback de progression pendant le traitement
- Messages de completion d√©taill√©s apr√®s ex√©cution
- Communication continue et contextuelle
"""

import os
import sys
import time
import threading
import logging
from pathlib import Path

# Ajouter le r√©pertoire src au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent / "src"))

from peer.interfaces.sui.main import SpeechUserInterface
from peer.interfaces.sui.voice_state_machine import VoiceStateMachine, VoiceInterfaceState
from peer.interfaces.sui.domain.models import SpeechRecognitionResult
from peer.interfaces.sui.nlu.domain.nlp_engine import NLPEngine

# Configuration des logs
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

class MockIntentResult:
    """Mock pour simuler les r√©sultats d'intention NLP."""
    def __init__(self, command_type, confidence=0.95, parameters=None):
        self.command_type = command_type
        self.confidence = confidence
        self.parameters = parameters or {}

def test_voice_announcement_system():
    """Test du syst√®me d'annonce vocale am√©lior√©."""
    print("üé§ Test du syst√®me d'annonce vocale am√©lior√©")
    print("=" * 60)
    
    try:
        # Initialiser le SUI
        sui = SpeechUserInterface()
        
        if not sui.tts_engine:
            print("‚ö†Ô∏è  Moteur TTS non disponible, utilisation du fallback")
        
        # Test des diff√©rents types de commandes avec annonces
        test_commands = [
            ("help", "Aide et assistance"),
            ("status", "V√©rification du statut"),
            ("time", "Consultation de l'heure"),
            ("date", "Consultation de la date"),
            ("version", "Informations de version"),
            ("capabilities", "Pr√©sentation des capacit√©s"),
            ("echo", "R√©p√©tition de message")
        ]
        
        print("\nüîä Test des annonces d'actions enrichies:")
        print("-" * 40)
        
        for command_type, description in test_commands:
            print(f"\nTest: {description}")
            
            # Cr√©er un mock intent result
            mock_intent = MockIntentResult(command_type)
            recognition_text = f"Commande de test: {description}"
            
            # Tester l'annonce d'action
            action_announcement = sui._generate_action_announcement(mock_intent, recognition_text)
            print(f"üì¢ Annonce d'action: {action_announcement}")
            
            # Simuler l'ex√©cution et tester l'annonce de r√©sultat
            from peer.core import CoreResponse, ResponseType, CommandType
            
            # Mapper le string vers l'enum CommandType
            command_enum_map = {
                "help": CommandType.HELP,
                "status": CommandType.STATUS,
                "time": CommandType.TIME,
                "date": CommandType.DATE,
                "version": CommandType.VERSION,
                "capabilities": CommandType.CAPABILITIES,
                "echo": CommandType.ECHO
            }
            
            command_enum = command_enum_map.get(command_type, CommandType.HELP)
            
            # Simuler une r√©ponse positive
            mock_response = CoreResponse(
                type=ResponseType.SUCCESS,
                message=f"R√©sultat simul√© pour {description}",
                data={"command": command_type}
            )
            
            result_announcement = sui._generate_result_announcement(
                mock_response, command_enum, recognition_text
            )
            print(f"üéØ Annonce de r√©sultat: {result_announcement}")
            
            # Tester la vocalisation si TTS disponible
            if sui.tts_engine:
                print("üîä Test de vocalisation...")
                try:
                    # Utiliser le TTS direct macOS comme fallback
                    import platform
                    if platform.system() == 'Darwin':
                        import subprocess
                        subprocess.run(['say', '-v', 'Audrey', '-r', '200', action_announcement[:100]], 
                                     check=False, timeout=3)
                        time.sleep(0.5)
                        subprocess.run(['say', '-v', 'Audrey', '-r', '200', result_announcement[:100]], 
                                     check=False, timeout=3)
                except Exception as e:
                    print(f"‚ö†Ô∏è  Erreur TTS: {e}")
            
            print("‚úÖ Test termin√©\n")
            time.sleep(0.3)  # Pause entre les tests
        
        print("\nüéõÔ∏è Test de la machine d'√©tat vocale:")
        print("-" * 40)
        
        if sui.voice_state_machine:
            vsm = sui.voice_state_machine
            
            # Test du feedback de completion
            class MockIntentContext:
                def __init__(self, intent_type, text, params=None):
                    self.intent_type = intent_type
                    self.text = text
                    self.parameters = params or {}
                    self.confidence = 0.9
                    self.summary = f"ex√©cuter la commande {intent_type}"
            
            print("\nüìã Test des messages de completion contextuels:")
            for command_type, description in test_commands:
                mock_intent_ctx = MockIntentContext(command_type, f"Test de {description}")
                response_message = f"R√©sultat d√©taill√© pour {description}"
                
                completion_feedback = vsm._generate_completion_feedback(mock_intent_ctx, response_message)
                print(f"‚ú® {command_type.upper()}: {completion_feedback}")
        
        print("\nüéâ Test du syst√®me d'annonce vocale termin√© avec succ√®s!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        # Nettoyage
        try:
            if 'sui' in locals():
                sui.stop()
        except:
            pass

def test_fluid_communication_workflow():
    """Test du workflow de communication fluide."""
    print("\nüåä Test du workflow de communication fluide")
    print("=" * 60)
    
    try:
        # Simuler un workflow complet de commande vocale
        workflows = [
            {
                "user_input": "quelle heure est-il",
                "expected_command": "time",
                "description": "Demande d'heure avec feedback complet"
            },
            {
                "user_input": "quel est le statut du syst√®me",
                "expected_command": "status", 
                "description": "V√©rification de statut avec √©tapes d√©taill√©es"
            },
            {
                "user_input": "aide moi",
                "expected_command": "help",
                "description": "Demande d'aide avec guidance compl√®te"
            }
        ]
        
        sui = SpeechUserInterface()
        
        for i, workflow in enumerate(workflows, 1):
            print(f"\nüîÑ Workflow {i}: {workflow['description']}")
            print(f"   Entr√©e utilisateur: \"{workflow['user_input']}\"")
            
            # Simuler la reconnaissance vocale
            print("   1Ô∏è‚É£ Reconnaissance vocale simul√©e...")
            
            # Simuler l'analyse NLP
            print("   2Ô∏è‚É£ Analyse NLP et extraction d'intention...")
            mock_intent = MockIntentResult(workflow['expected_command'])
            
            # Test du handler de commande vocale complet
            print("   3Ô∏è‚É£ Traitement de la commande avec feedback...")
            
            try:
                response = sui._handle_voice_command(mock_intent, workflow['user_input'])
                print(f"   ‚úÖ R√©ponse g√©n√©r√©e: {response[:100]}...")
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erreur dans le traitement: {e}")
            
            print(f"   üéØ Workflow {i} termin√©\n")
        
        print("üéâ Test du workflow de communication fluide termin√©!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de workflow: {e}")
        return False
    
    finally:
        try:
            if 'sui' in locals():
                sui.stop()
        except:
            pass

def main():
    """Fonction principale de test."""
    print("üöÄ D√©marrage des tests de communication vocale fluide")
    print("=" * 80)
    
    # Test 1: Syst√®me d'annonce vocale
    success1 = test_voice_announcement_system()
    
    time.sleep(1)
    
    # Test 2: Workflow de communication fluide
    success2 = test_fluid_communication_workflow()
    
    # R√©sum√© des r√©sultats
    print("\n" + "=" * 80)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 80)
    
    print(f"‚úÖ Syst√®me d'annonce vocale: {'SUCC√àS' if success1 else '√âCHEC'}")
    print(f"‚úÖ Workflow de communication: {'SUCC√àS' if success2 else '√âCHEC'}")
    
    overall_success = success1 and success2
    print(f"\nüéØ R√âSULTAT GLOBAL: {'SUCC√àS COMPLET' if overall_success else '√âCHEC PARTIEL'}")
    
    if overall_success:
        print("\nüéâ F√âLICITATIONS ! Le syst√®me de communication vocale fluide")
        print("   a √©t√© am√©lior√© avec succ√®s. Les nouvelles fonctionnalit√©s incluent :")
        print("   ‚Ä¢ Annonces d'actions d√©taill√©es avant ex√©cution")
        print("   ‚Ä¢ Feedback de progression pendant le traitement")
        print("   ‚Ä¢ Messages de completion contextuels apr√®s ex√©cution")
        print("   ‚Ä¢ Communication continue et naturelle")
    else:
        print("\n‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez les logs pour plus de d√©tails.")
    
    return overall_success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
