#!/usr/bin/env python3
"""
Script de configuration et d'optimisation pour le syst√®me de communication vocale
"""

import os
import sys
import subprocess
import torch
import platform

def check_system_requirements():
    """V√©rifier la configuration syst√®me"""
    print("üîç V√©rification de la configuration syst√®me...")
    
    # Informations syst√®me
    print(f"Syst√®me: {platform.system()} {platform.release()}")
    print(f"Architecture: {platform.machine()}")
    print(f"Python: {sys.version}")
    
    # PyTorch et MPS
    print(f"PyTorch: {torch.__version__}")
    print(f"MPS disponible: {torch.backends.mps.is_available()}")
    print(f"MPS compil√©: {torch.backends.mps.is_built()}")
    
    if torch.backends.mps.is_available():
        print("‚úÖ Metal Performance Shaders (MPS) activ√©")
    else:
        print("‚ö†Ô∏è MPS non disponible, utilisation du CPU")
    
    # CUDA (si applicable)
    if torch.cuda.is_available():
        print(f"CUDA disponible: {torch.cuda.device_count()} device(s)")
    
    return True

def check_audio_devices():
    """V√©rifier les p√©riph√©riques audio"""
    print("\nüéß V√©rification des p√©riph√©riques audio...")
    
    try:
        import sounddevice as sd
        devices = sd.query_devices()
        
        print("P√©riph√©riques audio disponibles:")
        for i, device in enumerate(devices):
            device_type = []
            if device['max_input_channels'] > 0:
                device_type.append("INPUT")
            if device['max_output_channels'] > 0:
                device_type.append("OUTPUT")
            
            print(f"  {i}: {device['name']} [{', '.join(device_type)}]")
        
        # P√©riph√©rique par d√©faut
        default_device = sd.default.device
        print(f"\nP√©riph√©rique par d√©faut: {default_device}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur v√©rification audio: {e}")
        return False

def optimize_for_macos():
    """Optimisations sp√©cifiques √† macOS"""
    print("\nüçé Optimisations macOS...")
    
    # Variables d'environnement pour MPS
    os.environ['PYTORCH_ENABLE_MPS_FALLBACK'] = '1'
    os.environ['PYTORCH_MPS_HIGH_WATERMARK_RATIO'] = '0.0'
    
    print("‚úÖ Variables d'environnement MPS configur√©es")
    
    # Recommandations syst√®me
    print("\nüìã Recommandations syst√®me:")
    print("‚Ä¢ Fermez les autres applications audio intensives")
    print("‚Ä¢ V√©rifiez que le microphone est autoris√© dans Pr√©f√©rences Syst√®me")
    print("‚Ä¢ Utilisez des √©couteurs pour √©viter l'√©cho")
    
    return True

def test_models():
    """Tester le chargement des mod√®les"""
    print("\nüß™ Test de chargement des mod√®les...")
    
    # Test TTS
    try:
        print("Chargement de XTTS V2...")
        from TTS.api import TTS
        tts = TTS("tts_models/multilingual/multi-dataset/xtts_v2")
        print("‚úÖ XTTS V2 charg√© avec succ√®s")
        del tts  # Lib√©rer la m√©moire
    except Exception as e:
        print(f"‚ùå Erreur XTTS V2: {e}")
    
    # Test WhisperX
    try:
        print("Chargement de WhisperX...")
        import whisperx
        model = whisperx.load_model("base", device="cpu", compute_type="float32")
        print("‚úÖ WhisperX charg√© avec succ√®s")
        del model  # Lib√©rer la m√©moire
    except Exception as e:
        print(f"‚ùå Erreur WhisperX: {e}")
    
    return True

def create_startup_script():
    """Cr√©er un script de d√©marrage simplifi√©"""
    startup_script = """#!/bin/bash
# Script de d√©marrage pour le syst√®me de communication vocale

echo "üöÄ D√©marrage du syst√®me de communication vocale peer-to-peer"
echo "==============================================="

# Activer l'environnement virtuel
source vepeer/bin/activate

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "voice_peer.py" ]; then
    echo "‚ùå Erreur: voice_peer.py non trouv√©"
    echo "Veuillez ex√©cuter ce script depuis le r√©pertoire /Users/smpceo/Desktop/peer"
    exit 1
fi

# Configuration des variables d'environnement pour macOS MPS
export PYTORCH_ENABLE_MPS_FALLBACK=1
export PYTORCH_MPS_HIGH_WATERMARK_RATIO=0.0

# Lancer le syst√®me
python voice_peer.py

echo "üëã Syst√®me arr√™t√©"
"""
    
    with open("/Users/smpceo/Desktop/peer/start_voice_system.sh", "w") as f:
        f.write(startup_script)
    
    # Rendre le script ex√©cutable
    os.chmod("/Users/smpceo/Desktop/peer/start_voice_system.sh", 0o755)
    
    print("‚úÖ Script de d√©marrage cr√©√©: start_voice_system.sh")
    return True

def main():
    print("üîß CONFIGURATION DU SYST√àME DE COMMUNICATION VOCALE")
    print("=" * 55)
    
    try:
        # V√©rifications syst√®me
        check_system_requirements()
        check_audio_devices()
        optimize_for_macos()
        test_models()
        create_startup_script()
        
        print("\n" + "=" * 55)
        print("‚úÖ CONFIGURATION TERMIN√âE AVEC SUCC√àS!")
        print("=" * 55)
        print("\nüìã Instructions d'utilisation:")
        print("1. Pour d√©marrer le syst√®me: ./start_voice_system.sh")
        print("2. Ou directement: python voice_peer.py")
        print("3. Assurez-vous que votre microphone est autoris√©")
        print("4. Utilisez des √©couteurs pour une meilleure exp√©rience")
        
        print("\nüéØ Fonctionnalit√©s disponibles:")
        print("‚Ä¢ Reconnaissance vocale en temps r√©el (WhisperX)")
        print("‚Ä¢ Synth√®se vocale haute qualit√© (XTTS V2)")
        print("‚Ä¢ Optimisation macOS MPS pour de meilleures performances")
        print("‚Ä¢ Communication bidirectionnelle voix-√†-voix")
        
    except Exception as e:
        print(f"\n‚ùå Erreur durant la configuration: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    main()
