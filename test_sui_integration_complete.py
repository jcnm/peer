#!/usr/bin/env python3
"""
Test d'int√©gration compl√®te SUI + Syst√®me vocal fran√ßais
======================================================
Ce script teste l'int√©gration end-to-end du syst√®me SUI avec le TTS fran√ßais optimis√©.
"""

import os
import sys
import time
import subprocess
import threading
import signal
from pathlib import Path

# Configuration
PEER_ROOT = Path("/Users/smpceo/Desktop/peer")
SUI_SCRIPT = PEER_ROOT / "run_sui.sh"
CONFIG_PATH = Path("/Users/smpceo/.peer/config/sui/models.yaml")

def print_section(title, emoji="üéØ"):
    print(f"\n{emoji} {title}")
    print("=" * (len(title) + 3))

def test_tts_direct():
    """Test direct du syst√®me TTS fran√ßais"""
    print_section("TEST TTS DIRECT", "üîä")
    
    try:
        sys.path.insert(0, str(PEER_ROOT / "src"))
        from peer.interfaces.sui.tts.simple_tts_engine import SimpleTTS
        from peer.interfaces.sui.tts.base import TTSConfig, TTSEngineType
        
        # Test avec configuration fran√ßaise
        config = TTSConfig(
            engine_type=TTSEngineType.SIMPLE,
            language="fr",
            voice="Audrey",
            engine_specific_params={
                "rate": 190,
                "volume": 0.8,
                "preferred_simple_engine_order": ["say", "pyttsx3"]
            }
        )
        engine = SimpleTTS(config)
        
        # Test de synth√®se
        test_text = "Bonjour, je suis le syst√®me vocal fran√ßais de Peer."
        print(f"üé§ Test synth√®se : '{test_text}'")
        
        result = engine.synthesize(
            text=test_text
        )
        
        if result and os.path.exists(result):
            print(f"‚úÖ Synth√®se r√©ussie : {result}")
            
            # Lecture du fichier audio
            subprocess.run(["afplay", result], check=True)
            print("üîä Audio lu avec succ√®s")
            
            # Nettoyage
            os.remove(result)
            return True
        else:
            print("‚ùå √âchec de la synth√®se")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur TTS direct : {e}")
        return False

def test_config_loading():
    """Test du chargement de configuration"""
    print_section("TEST CONFIGURATION", "‚öôÔ∏è")
    
    try:
        if not CONFIG_PATH.exists():
            print(f"‚ùå Configuration non trouv√©e : {CONFIG_PATH}")
            return False
            
        with open(CONFIG_PATH, 'r') as f:
            content = f.read()
            
        print(f"üìã Configuration trouv√©e : {CONFIG_PATH}")
        
        # V√©rification du contenu
        if "simple" in content:
            print("‚úÖ Engine 'simple' configur√©")
        else:
            print("‚ö†Ô∏è Engine 'simple' non trouv√© dans la config")
            
        if "fr" in content or "french" in content.lower():
            print("‚úÖ Configuration fran√ßaise d√©tect√©e")
        else:
            print("‚ö†Ô∏è Configuration fran√ßaise non d√©tect√©e")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur configuration : {e}")
        return False

def test_sui_startup():
    """Test de d√©marrage SUI avec timeout"""
    print_section("TEST D√âMARRAGE SUI", "üöÄ")
    
    try:
        if not SUI_SCRIPT.exists():
            print(f"‚ùå Script SUI non trouv√© : {SUI_SCRIPT}")
            return False
            
        print(f"üîÑ D√©marrage SUI (timeout 30s)...")
        
        # D√©marrage SUI avec timeout
        process = subprocess.Popen(
            ["bash", str(SUI_SCRIPT)],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            cwd=str(PEER_ROOT)
        )
        
        # Attendre le d√©marrage (max 30s)
        start_time = time.time()
        timeout = 30
        
        while time.time() - start_time < timeout:
            if process.poll() is not None:
                # Le processus s'est termin√©
                stdout, stderr = process.communicate()
                
                if process.returncode == 0:
                    print("‚úÖ SUI d√©marr√© avec succ√®s")
                    return True
                else:
                    print(f"‚ùå SUI √©chec de d√©marrage (code: {process.returncode})")
                    if stderr:
                        print(f"üîç Erreurs : {stderr[:500]}...")
                    return False
            
            time.sleep(1)
        
        # Timeout atteint, tuer le processus
        print("‚è∞ Timeout atteint, arr√™t du processus...")
        process.terminate()
        time.sleep(2)
        if process.poll() is None:
            process.kill()
            
        print("‚ö†Ô∏è SUI prend trop de temps √† d√©marrer (normal en mode interactif)")
        return True  # Ce n'est pas forc√©ment une erreur
        
    except Exception as e:
        print(f"‚ùå Erreur d√©marrage SUI : {e}")
        return False

def test_integration_script():
    """Cr√©ation d'un script d'int√©gration SUI + TTS"""
    print_section("CR√âATION SCRIPT INT√âGRATION", "üîß")
    
    integration_script = PEER_ROOT / "sui_french_integration.py"
    
    script_content = '''#!/usr/bin/env python3
"""
Script d'int√©gration SUI + TTS Fran√ßais
=====================================
"""

import sys
import os
from pathlib import Path

# Ajout du chemin Peer
sys.path.insert(0, "/Users/smpceo/Desktop/peer/src")

try:
    from peer.interfaces.sui.tts.text_to_speech import TextToSpeech
    from peer.interfaces.sui.tts.base import TTSConfig, TTSEngineType
    
    print("üá´üá∑ Test int√©gration SUI + TTS Fran√ßais")
    print("="*40)
    
    # Configuration fran√ßaise optimis√©e
    config = TTSConfig(
        engine_type=TTSEngineType.SIMPLE,
        language="fr",
        voice="Audrey",
        engine_specific_params={
            "rate": 190,
            "volume": 0.8,
            "preferred_simple_engine_order": ["say", "pyttsx3"]
        }
    )
    
    # Initialisation TTS
    tts = TextToSpeech(config)
    
    # Test de synth√®se
    test_phrases = [
        "Bonjour, je suis votre assistant vocal Peer.",
        "Le syst√®me de synth√®se vocale fran√ßaise est maintenant op√©rationnel.",  
        "Merci d'avoir test√© le syst√®me SUI avec la voix fran√ßaise."
    ]
    
    for i, phrase in enumerate(test_phrases, 1):
        print(f"üé§ [{i}/{len(test_phrases)}] Synth√®se : {phrase[:50]}...")
        
        try:
            result = tts.synthesize(phrase)
            if result and result.success and os.path.exists(result.audio_path):
                print(f"‚úÖ Synth√®se r√©ussie")
                # Lecture
                os.system(f"afplay '{result.audio_path}'")
                # Nettoyage optionnel (les fichiers temp sont auto-nettoy√©s)
            else:
                print(f"‚ùå √âchec synth√®se")
        except Exception as e:
            print(f"‚ùå Erreur : {e}")
    
    print("\\nüéâ Test d'int√©gration termin√© !")
    
except ImportError as e:
    print(f"‚ùå Erreur d'import : {e}")
except Exception as e:
    print(f"‚ùå Erreur g√©n√©rale : {e}")
'''
    
    try:
        with open(integration_script, 'w') as f:
            f.write(script_content)
        
        os.chmod(integration_script, 0o755)
        print(f"‚úÖ Script cr√©√© : {integration_script}")
        
        # Test du script
        print("üîÑ Ex√©cution du script d'int√©gration...")
        result = subprocess.run(
            ["python3", str(integration_script)],
            capture_output=True,
            text=True,
            cwd=str(PEER_ROOT)
        )
        
        if result.returncode == 0:
            print("‚úÖ Script d'int√©gration ex√©cut√© avec succ√®s")
            print(f"üìã Sortie :\n{result.stdout}")
            return True
        else:
            print("‚ùå √âchec du script d'int√©gration")
            print(f"üîç Erreurs : {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation script : {e}")
        return False

def main():
    """Test d'int√©gration compl√®te"""
    print_section("TEST INT√âGRATION COMPL√àTE SUI + TTS FRAN√áAIS", "üéØ")
    
    tests = [
        ("Configuration", test_config_loading),
        ("TTS Direct", test_tts_direct),
        ("Script Int√©gration", test_integration_script),
        ("D√©marrage SUI", test_sui_startup),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüîÑ Test : {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
            status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHEC"
            print(f"üìä {test_name} : {status}")
        except Exception as e:
            print(f"‚ùå Erreur {test_name} : {e}")
            results.append((test_name, False))
    
    # R√©sultats finaux
    print_section("R√âSULTATS FINAUX", "üèÜ")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {test_name}")
    
    print(f"\nüìä Score : {passed}/{total}")
    
    if passed == total:
        print("üéâ INT√âGRATION COMPL√àTE R√âUSSIE !")
        print("‚úÖ Le syst√®me vocal fran√ßais est pr√™t pour SUI")
    elif passed >= total * 0.75:
        print("‚ö†Ô∏è INT√âGRATION PARTIELLEMENT R√âUSSIE")
        print("üîß Quelques ajustements mineurs peuvent √™tre n√©cessaires")
    else:
        print("‚ùå INT√âGRATION √âCHOU√âE")
        print("üîß Des corrections sont n√©cessaires")
    
    print("\nüìã UTILISATION :")
    print("  ‚Ä¢ SUI complet : ./run_sui.sh")
    print("  ‚Ä¢ Test int√©gration : python3 sui_french_integration.py")
    print("  ‚Ä¢ Validation simple : python3 validation_finale_simple.py")

if __name__ == "__main__":
    main()
